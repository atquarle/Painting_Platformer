<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>phy_fixed_rotation = true;
move_direction = 0;
spd = 250;
grav = 500;
grounded = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (place_meeting(x,y,object1) &amp;&amp; keyboard_check_pressed(vk_space) &amp;&amp; global.world_state == 0) {
    global.world_state = 1;
    background_color = c_gray;
    ydir = -1;
    temp = instance_create(x,y,object10);
    temp.phy_linear_velocity_x = phy_linear_velocity_x
    temp.phy_linear_velocity_y = phy_linear_velocity_y
    instance_destroy();
    /*physics_remove_fixture(self, fixture);
    fixture = physics_fixture_bind(fixture2,self);*/
    sprite_index = sprite3;
}

if (place_meeting(x,y,object3) &amp;&amp; keyboard_check_pressed(vk_space) &amp;&amp; global.world_state == 1) {
    global.world_state = 0;
    background_color = c_white;
    ydir = 1;
    temp = instance_create(x,y,object9);
    temp.phy_linear_velocity_x = phy_linear_velocity_x
    temp.phy_linear_velocity_y = phy_linear_velocity_y
    instance_destroy();
    /*physics_remove_fixture(self, fixture);
    fixture = physics_fixture_bind(fixture1,self);*/
    sprite_index = sprite0;
}

if(collision_rectangle(x-1, y-1, x+sprite_width+1, y+sprite_height+1, object2,false,true)) grounded = true;
else grounded = false;

if keyboard_check_pressed(vk_left)
{
    move_direction--;
}

if keyboard_check_released(vk_left)
{
    move_direction++;
}

if keyboard_check_pressed(vk_right)
{
    move_direction++;
}

if keyboard_check_released(vk_right)
{
    move_direction--;
}

if keyboard_check_pressed(vk_up)
{
    if (grounded &amp;&amp; global.world_state == 0) phy_linear_velocity_y = -400;
}

if keyboard_check_pressed(vk_down)
{
    if (grounded &amp;&amp; global.world_state == 1) phy_linear_velocity_y = 400;
}

phy_linear_velocity_x = move_direction * spd;
physics_apply_force(x,y,0,grav*ydir);

if(phy_linear_velocity_x &gt; 250) phy_linear_velocity_x = 250;
if(phy_linear_velocity_x &lt; -250) phy_linear_velocity_x = -250;
if(phy_linear_velocity_y &gt; 1000) phy_linear_velocity_y = 1000;
if(phy_linear_velocity_y &lt; -1000) phy_linear_velocity_y = -1000;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>32,0</point>
    <point>32,32</point>
    <point>0,32</point>
  </PhysicsShapePoints>
</object>
