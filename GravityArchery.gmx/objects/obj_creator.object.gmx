<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gravBall = noone;

pointsX[0] = 0;
pointsY[0] = 0;

size = 1;
pos = 0;

maxcount = 500;

forceMin = 0.02;
test = 0.09957;
testChange = 0.00001
changeTimes = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(mouse_check_button(mb_left)) {
    if(!position_meeting(mouse_x, mouse_y, obj_grav) &amp;&amp; gravBall == noone) {
        gravBall = instance_create(mouse_x, mouse_y, obj_grav);
    } else if(position_meeting(mouse_x, mouse_y, obj_grav) &amp;&amp; gravBall == noone) {
        gravBall = instance_position(mouse_x, mouse_y, obj_grav);
        with(gravBall) {
            phy_position_x = mouse_x;
            phy_position_y = mouse_y;
        }
    }
}

if(mouse_check_button(mb_right)) {
    if(position_meeting(mouse_x, mouse_y, obj_grav)) {
        gravBall = instance_position(mouse_x, mouse_y, obj_grav);
        instance_destroy(gravBall);
        gravBall = noone;
    }
}

if(mouse_wheel_up()) {
    if(position_meeting(mouse_x, mouse_y, obj_grav)) {
        gravBall = instance_position(mouse_x, mouse_y, obj_grav);
        with(gravBall) {
            color += 10;
            if(color &gt; color_max) color = color_max;
            else mass += 0.3;
        }
        gravBall = noone;
    }
}

if(mouse_wheel_down()) {
    if(position_meeting(mouse_x, mouse_y, obj_grav)) {
        gravBall = instance_position(mouse_x, mouse_y, obj_grav);
        with(gravBall) {
            color -= 10;
            if(color &lt; color_min) color = color_min;
            else mass -= 0.3;
        }
        gravBall = noone;
    }
}

if(mouse_check_button_released(mb_left)) gravBall = noone;

if(gravBall != noone) {
    with(gravBall) {
        phy_position_x = mouse_x;
        phy_position_y = mouse_y;
    }
}

spdX = 49.74;
spdY = -9.95;
size = 1;
pos = 0;
count = 0;

with obj_cannon {
    other.pointsX[0] = x;
    other.pointsY[0] = y;
}

while(count &lt; maxcount) {
    Fx = 0;
    Fy = 0;
    with obj_grav {
        d2 = power(phy_position_x - other.pointsX[other.pos], 2) + power(phy_position_y - other.pointsY[other.pos], 2);
        F = global.gravConstant*mass*1.01/d2;
        if(F &gt;= other.forceMin) {
            d = sqrt(d2);
            dx = abs(phy_position_x - other.pointsX[other.pos]);
            dy = abs(phy_position_y - other.pointsY[other.pos]);
            if(dx == 0) {
                Fx = 0;
                Fy = F;
            } else if(dy == 0) {
                Fx = F;
                Fy = 0;
            } else {
                angle = arctan(dy/dx);
                Fx = cos(angle)*F;
                Fy = sin(angle)*F;
            }
            
            if(phy_position_x &lt; other.pointsX[other.pos]) Fx = -Fx;
            if(phy_position_y &lt; other.pointsY[other.pos]) Fy = -Fy;
            
            other.Fx += Fx;
            other.Fy += Fy;
        }
    }
    
    spdX += Fx/1.01;
    spdY += Fy/1.01;
    /*angle = arctan(Fy/Fx);
    
    spd = sqrt(power(Fx/1.01, 2)*power(Fy/1.01, 2));
    spd *= 0.1;
    spdX += cos(angle)*spd;
    spdY += sin(angle)*spd;*/
    
    
    pointsX[pos+1] = spdX*test + pointsX[pos];
    pointsY[pos+1] = spdY*test + pointsY[pos];
    
    size++;
    pos++;
    count++;
}
show_debug_message(changeTimes);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="39">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>test -= testChange;
changeTimes -= 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="37">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>test += testChange;
changeTimes += 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_colour(c_black);
index = 0;
while(index &lt; size-1) {
    draw_line(pointsX[index],pointsY[index],pointsX[index+1],pointsY[index+1]);
    index++;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
