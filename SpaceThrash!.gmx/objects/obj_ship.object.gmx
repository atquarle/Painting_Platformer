<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Ship</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>acceleration_x = 0;
acceleration_y = 0;
velocity_x = 0;
velocity_y = 0;
orientation = 3*pi/2;

MAX_VELOCITY = 10;

timer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check Shooting
if(keyboard_check_pressed(vk_space) &amp;&amp; timer &gt;= 10) {
    timer = 0;
    scr_shoot();
}

//Check Rotating
if(keyboard_check(vk_right)) {
    orientation -= pi/16;
    if(orientation &lt; 0) orientation += 2*pi;
    image_angle = radtodeg(orientation) + 90;
    
    //Check Collision with Boundary
    while(place_meeting(x, y, obj_boundary)) {
        orientation += pi/64;
        image_angle = radtodeg(orientation) + 90;
    }
    
} else if(keyboard_check(vk_left)) {
    orientation += pi/16;
    if(orientation &gt; 2*pi) orientation -= 2*pi;
    image_angle = radtodeg(orientation) + 90;
    
    //Check Collision with Boundary
    while(place_meeting(x, y, obj_boundary)) {
        orientation -= pi/64;
        image_angle = radtodeg(orientation) + 90;
    }
}

//Check Moving Forward
if(keyboard_check(vk_up)) {
    sprite_index = Ship_Thrust;
    acceleration_x = -cos(orientation);
    acceleration_y = sin(orientation);
} else {
    sprite_index = Ship;
    acceleration_x = 0;
    acceleration_y = 0;
}

//Check Future Collision with Boundary
if(place_meeting(x + velocity_x, y + velocity_y, obj_boundary)) {
    len = sqrt(sqr(velocity_x) + sqr(velocity_y));
    
    
    //Collision Detected; Move to Place of Meeting
    while(!place_meeting(x + velocity_x/len, y + velocity_y/len, obj_boundary)) {
        x += velocity_x/len;
        y += velocity_y/len;
    }
    
    //Determine Which Side has the Collision
    boundary_x = 1;
    boundary_y = 1;
    
    if(place_meeting(x + 1, y, obj_boundary)) boundary_x = -1;
    if(place_meeting(x - 1, y, obj_boundary)) boundary_x = -1;
    if(place_meeting(x, y + 1, obj_boundary)) boundary_y = -1;
    if(place_meeting(x, y - 1, obj_boundary)) boundary_y = -1;
    
    //Set Velocity to Unit Vector in Perpendicular Direction
    if(velocity_x != 0) velocity_x = floor(sqrt(abs(velocity_x))) * boundary_x * velocity_x / len;
    else if(acceleration_x != 0) velocity_x = boundary_x * acceleration_x * 2;
    if(velocity_y != 0) velocity_y = floor(sqrt(abs(velocity_y))) * boundary_y * velocity_y / len;
    else if(acceleration_y != 0) velocity_y = boundary_y * acceleration_y * 2;  
}

//Check Current Collision with Asteroid
if(place_meeting(x, y, obj_asteroid)) {
    audio_play_sound(snd_lose, 0, false);
    room_goto(3);
}

//Update Position
x += velocity_x;
y += velocity_y;

//Update Velocity
velocity_x += acceleration_x;
velocity_y += acceleration_y;

//Increment the Bullet Delay Timer
timer++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
