<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_idle_right</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Variables
phy_fixed_rotation = true;
image_speed = 0.15;
imgSpd = 0.15;
runImgSpd = 0.2;
jumpImgSpd = 0.3;
flipImgSpd = 0.35;
move_direction = 0;
spd = 115;
dashSpd = 300;
dashLength = 0.25;
jump = 285;
grav = 125;
gravDir = 1;
grounded = false;
dashing = false;
jumpsLeft = 2;
dashesLeft = 1;
global.world_state = 0;

//Current Sprite Indices
cIdleRightIndex = spr_player_idle_right;
cIdleLeftIndex = spr_player_idle_left;
cRunRightIndex = spr_player_run_right;
cRunLeftIndex = spr_player_run_left;
cJumpRightIndex = spr_player_jump_right;
cJumpLeftIndex = spr_player_jump_left;
cFlipRightIndex = spr_player_flip_right;
cFlipLeftIndex = spr_player_flip_left;
cFallRightIndex = spr_player_fall_right;
cFallLeftIndex = spr_player_fall_left;
cDashRightIndex = spr_player_dash_right;
cDashLeftIndex = spr_player_dash_left;  

//Sprite Indices
idleRightIndex = spr_player_idle_right;
idleLeftIndex = spr_player_idle_left;
runRightIndex = spr_player_run_right;
runLeftIndex = spr_player_run_left;
jumpRightIndex = spr_player_jump_right;
jumpLeftIndex = spr_player_jump_left;
flipRightIndex = spr_player_flip_right;
flipLeftIndex = spr_player_flip_left;
fallRightIndex = spr_player_fall_right;
fallLeftIndex = spr_player_fall_left;
dashRightIndex = spr_player_dash_right;
dashLeftIndex = spr_player_dash_left;  
idleRightMIndex = spr_player_idle_right_mirror;
idleLeftMIndex = spr_player_idle_left_mirror;
runRightMIndex = spr_player_run_right_mirror;
runLeftMIndex = spr_player_run_left_mirror;
jumpRightMIndex = spr_player_jump_right_mirror;
jumpLeftMIndex = spr_player_jump_left_mirror;
flipRightMIndex = spr_player_flip_right_mirror;
flipLeftMIndex = spr_player_flip_left_mirror;
fallRightMIndex = spr_player_fall_right_mirror;
fallLeftMIndex = spr_player_fall_left_mirror;
dashRightMIndex = spr_player_dash_right_mirror;
dashLeftMIndex = spr_player_dash_left_mirror;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset Dashing
dashing = false;
if(sprite_index == dashRightIndex || sprite_index == dashRightMIndex) change_sprite(cFallRightIndex, 0, imgSpd);
else if(sprite_index == dashLeftIndex || sprite_index == dashLeftMIndex) change_sprite(cFallLeftIndex, 0, imgSpd);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(keyboard_check_pressed(vk_space)) {
  cIdleRightIndex = idleRightMIndex;
  cIdleLeftIndex = idleLeftMIndex;
  cRunRightIndex = runRightMIndex;
  cRunLeftIndex = runLeftMIndex;
  cJumpRightIndex = jumpRightMIndex;
  cJumpLeftIndex = jumpLeftMIndex;
  cFlipRightIndex = flipRightMIndex;
  cFlipLeftIndex = flipLeftMIndex;
  cFallRightIndex = fallRightMIndex;
  cFallLeftIndex = fallLeftMIndex;
  cDashRightIndex = dashRightMIndex;
  cDashLeftIndex = dashLeftMIndex;
  
  if(sprite_index == idleRightIndex) sprite_index = idleRightMIndex;
  else if(sprite_index == idleLeftIndex) sprite_index = idleLeftMIndex;
  else if(sprite_index == runRightIndex) sprite_index = runRightMIndex;
  else if(sprite_index == runLeftIndex) sprite_index = runLeftMIndex;
  else if(sprite_index == jumpRightIndex) sprite_index = jumpRightMIndex;
  else if(sprite_index == jumpLeftIndex) sprite_index = jumpLeftMIndex;
  else if(sprite_index == flipRightIndex) sprite_index = flipRightMIndex;
  else if(sprite_index == flipLeftIndex) sprite_index = flipLeftMIndex;
  else if(sprite_index == fallRightIndex) sprite_index = fallRightMIndex;
  else if(sprite_index == fallLeftIndex) sprite_index = fallLeftMIndex;
  else if(sprite_index == dashRightIndex) sprite_index = dashRightMIndex;
  else if(sprite_index == dashLeftIndex) sprite_index = dashLeftMIndex;
  background_color = make_colour_rgb(105,105,105);
  global.world_state = 1;

} else if(keyboard_check_released(vk_space)) {
  cIdleRightIndex = idleRightIndex;
  cIdleLeftIndex = idleLeftIndex;
  cRunRightIndex = runRightIndex;
  cRunLeftIndex = runLeftIndex;
  cJumpRightIndex = jumpRightIndex;
  cJumpLeftIndex = jumpLeftIndex;
  cFlipRightIndex = flipRightIndex;
  cFlipLeftIndex = flipLeftIndex;
  cFallRightIndex = fallRightIndex;
  cFallLeftIndex = fallLeftIndex;
  cDashRightIndex = dashRightIndex;
  cDashLeftIndex = dashLeftIndex; 
  
  if(sprite_index == idleRightMIndex) sprite_index = idleRightIndex;
  else if(sprite_index == idleLeftMIndex) sprite_index = idleLeftIndex;
  else if(sprite_index == runRightMIndex) sprite_index = runRightIndex;
  else if(sprite_index == runLeftMIndex) sprite_index = runLeftIndex;
  else if(sprite_index == jumpRightMIndex) sprite_index = jumpRightIndex;
  else if(sprite_index == jumpLeftMIndex) sprite_index = jumpLeftIndex;
  else if(sprite_index == flipRightMIndex) sprite_index = flipRightIndex;
  else if(sprite_index == flipLeftMIndex) sprite_index = flipLeftIndex;
  else if(sprite_index == fallRightMIndex) sprite_index = fallRightIndex;
  else if(sprite_index == fallLeftMIndex) sprite_index = fallLeftIndex;
  else if(sprite_index == dashRightMIndex) sprite_index = dashRightIndex;
  else if(sprite_index == dashLeftMIndex) sprite_index = dashLeftIndex;
  background_color = make_colour_rgb(150,150,150);
  global.world_state = 0;
  
}

if(collision_line(x+18,y+sprite_height,x+sprite_width-16.75,y+sprite_height,obj_wall,false,true)) grounded = true;
else grounded = false;
move_direction = keyboard_check(vk_right) - keyboard_check(vk_left);

if(grounded) {
  jumpsLeft = 2;
  dashesLeft = 1;
  if(sprite_index == fallRightIndex || sprite_index == fallRightMIndex) {
    if(move_direction == 1) change_sprite(cRunRightIndex, 0, runImgSpd);
    else change_sprite(cIdleRightIndex, 0, imgSpd);
  }
  else if(sprite_index == fallLeftIndex || sprite_index == fallLeftMIndex) {
    if(move_direction == -1) change_sprite(cRunLeftIndex, 0, runImgSpd);
    else change_sprite(cIdleLeftIndex, 0, imgSpd);
  }
} else {
  if(sprite_index == idleRightIndex || sprite_index == runRightIndex || sprite_index == idleRightMIndex || sprite_index == runRightMIndex) {
    jumpsLeft = 1;
    change_sprite(cFallRightIndex, 0, imgSpd);
  } else if(sprite_index == idleLeftIndex || sprite_index == runLeftIndex || sprite_index == idleLeftMIndex || sprite_index == runLeftMIndex) {
    jumpsLeft = 1;
    change_sprite(cFallLeftIndex, 0, imgSpd);
  }
}

if(image_index+image_speed &gt;= image_number || phy_linear_velocity_y &gt; 0) {
  if(sprite_index == jumpRightIndex || sprite_index == flipRightIndex || sprite_index == jumpRightMIndex || sprite_index == flipRightMIndex) change_sprite(cFallRightIndex, 0, imgSpd);
  if(sprite_index == jumpLeftIndex || sprite_index == flipLeftIndex || sprite_index == jumpLeftMIndex || sprite_index == flipLeftMIndex) change_sprite(cFallLeftIndex, 0, imgSpd);
}

if (move_direction != 0) {
  if(grounded) {
    if(move_direction == 1) change_sprite(cRunRightIndex, image_index, runImgSpd);
    else if(move_direction == -1) change_sprite(cRunLeftIndex, image_index, runImgSpd);
  } else {
    if((sprite_index == jumpLeftIndex || sprite_index == jumpLeftMIndex) &amp;&amp; move_direction == 1) change_sprite(cJumpRightIndex, image_index, jumpImgSpd);
    else if((sprite_index == flipLeftIndex || sprite_index == flipLeftMIndex) &amp;&amp; move_direction == 1) change_sprite(cFlipRightIndex, image_index, flipImgSpd);
    else if((sprite_index == fallLeftIndex || sprite_index == fallLeftMIndex) &amp;&amp; move_direction == 1) change_sprite(cFallRightIndex, 0, imgSpd);
    else if((sprite_index == jumpRightIndex || sprite_index == jumpRightMIndex) &amp;&amp; move_direction == -1) change_sprite(cJumpLeftIndex, image_index, jumpImgSpd);
    else if((sprite_index == flipRightIndex || sprite_index == flipRightMIndex) &amp;&amp; move_direction == -1) change_sprite(cFlipLeftIndex, image_index, flipImgSpd);
    else if((sprite_index == fallRightIndex || sprite_index == fallRightMIndex) &amp;&amp; move_direction == -1) change_sprite(cFallLeftIndex, 0, imgSpd);
  }
} else {
  if((sprite_index == runRightIndex || sprite_index == runRightMIndex) &amp;&amp; grounded) change_sprite(cIdleRightIndex, 0, imgSpd);
  else if((sprite_index == runLeftIndex || sprite_index == runLeftMIndex) &amp;&amp; grounded) change_sprite(cIdleLeftIndex, 0, imgSpd);
}

if(keyboard_check_pressed(vk_shift) &amp;&amp; dashesLeft &gt; 0) {
    if(!grounded) {
        dashing = true;
        dashesLeft--;
        phy_linear_velocity_y = 0;
        if(sprite_index == jumpRightIndex || sprite_index == flipRightIndex || sprite_index == fallRightIndex || sprite_index == jumpRightMIndex || sprite_index == flipRightMIndex || sprite_index == fallRightMIndex) {
            change_sprite(cDashRightIndex, 0, imgSpd);
            phy_linear_velocity_x = dashSpd;
        }
        else if(sprite_index == jumpLeftIndex || sprite_index == flipLeftIndex || sprite_index == fallLeftIndex || sprite_index == jumpLeftMIndex || sprite_index == flipLeftMIndex || sprite_index == fallLeftMIndex) {
            change_sprite(cDashLeftIndex, 0, imgSpd);
            phy_linear_velocity_x = -dashSpd;
        }
        alarm[0] = room_speed * dashLength;
    }
}

if(keyboard_check_pressed(vk_up) &amp;&amp; !dashing) {
    if(jumpsLeft &gt; 0) {
        phy_linear_velocity_y = -gravDir*jump;
        if((sprite_index == idleRightIndex || sprite_index == runRightIndex || sprite_index == idleRightMIndex || sprite_index == runRightMIndex) &amp;&amp; jumpsLeft == 2) change_sprite(cJumpRightIndex, 0, jumpImgSpd);
        else if((sprite_index == idleLeftIndex || sprite_index == runLeftIndex || sprite_index == idleLeftMIndex || sprite_index == runLeftMIndex) &amp;&amp; jumpsLeft == 2) change_sprite(cJumpLeftIndex, 0, jumpImgSpd);
        else if((sprite_index == jumpRightIndex || sprite_index == fallRightIndex || sprite_index == jumpRightMIndex || sprite_index == fallRightMIndex) &amp;&amp; jumpsLeft == 1) change_sprite(cFlipRightIndex, 0, flipImgSpd);
        else if((sprite_index == jumpLeftIndex || sprite_index == fallLeftIndex || sprite_index == jumpLeftMIndex || sprite_index == fallLeftMIndex) &amp;&amp; jumpsLeft == 1) change_sprite(cFlipLeftIndex, 0, flipImgSpd);
        jumpsLeft--;
    }
}

if(!dashing) {
    physics_apply_force(x,y,0,grav*gravDir);
    phy_linear_velocity_x = move_direction*spd;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>33.125,36</point>
    <point>18,36</point>
    <point>18,8</point>
    <point>33.125,8</point>
  </PhysicsShapePoints>
</object>
